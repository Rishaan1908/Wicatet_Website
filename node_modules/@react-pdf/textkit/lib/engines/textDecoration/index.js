"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _ascent = _interopRequireDefault(require("../../run/ascent"));

var _ascent2 = _interopRequireDefault(require("../../attributedString/ascent"));

var _advanceWidth = _interopRequireDefault(require("../../run/advanceWidth"));

var _advanceWidth2 = _interopRequireDefault(require("../../attributedString/advanceWidth"));

/* eslint-disable no-param-reassign */
// The base font size used for calculating underline thickness.
var BASE_FONT_SIZE = 12;
/**
 * A TextDecorationEngine is used by a Typesetter to generate
 * DecorationLines for a line fragment, including underlines
 * and strikes.
 */

var textDecoration = function textDecoration() {
  return function (lineFragment) {
    var x = lineFragment.overflowLeft || 0;
    var overflowRight = lineFragment.overflowRight || 0;
    var maxX = (0, _advanceWidth2.default)(lineFragment) - overflowRight;
    lineFragment.decorationLines = [];

    for (var i = 0; i < lineFragment.runs.length; i += 1) {
      var run = lineFragment.runs[i];
      var width = Math.min(maxX - x, (0, _advanceWidth.default)(run));
      var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));

      if (run.attributes.underline) {
        var rect = {
          x: x,
          y: (0, _ascent2.default)(lineFragment) + thickness * 2,
          width: width,
          height: thickness
        };
        var line = {
          rect: rect,
          opacity: run.attributes.opacity,
          color: run.attributes.underlineColor || 'black',
          style: run.attributes.underlineStyle || 'solid'
        };
        lineFragment.decorationLines.push(line);
      }

      if (run.attributes.strike) {
        var y = (0, _ascent2.default)(lineFragment) - (0, _ascent.default)(run) / 3;
        var _rect = {
          x: x,
          y: y,
          width: width,
          height: thickness
        };
        var _line = {
          rect: _rect,
          opacity: run.attributes.opacity,
          color: run.attributes.strikeColor || 'black',
          style: run.attributes.strikeStyle || 'solid'
        };
        lineFragment.decorationLines.push(_line);
      }

      x += width;
    }

    return lineFragment;
  };
};

var _default = textDecoration;
exports.default = _default;