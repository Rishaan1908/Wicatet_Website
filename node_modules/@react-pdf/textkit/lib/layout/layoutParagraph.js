"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _omit = _interopRequireDefault(require("../run/omit"));

var _height = _interopRequireDefault(require("../attributedString/height"));

var ATTACHMENT_CODE = "\uFFFC"; // 65532

/**
 * Remove attachment attribute if no char present
 *
 * @param  {Object} attributed string
 * @return {Object} attributed string
 */

var purgeAttachments = function purgeAttachments(attributedString) {
  var shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE);
  if (!shouldPurge) return attributedString;
  var runs = attributedString.runs.map(function (run) {
    return (0, _omit.default)('attachment', run);
  });
  return Object.assign({}, attributedString, {
    runs: runs
  });
};
/**
 * Layout paragraphs inside rectangle
 *
 * @param  {Object} rect
 * @param  {Array} attributed strings
 * @return {Object} layout blocks
 */


var layoutLines = function layoutLines(rect, lines, indent) {
  var currentY = rect.y;
  return lines.map(function (line, i) {
    var _line$runs, _line$runs$;

    var lineIndent = i === 0 ? indent : 0;
    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};
    var height = Math.max((0, _height.default)(line), style.lineHeight);
    var newLine = Object.assign({}, line);
    delete newLine.syllables;
    newLine.box = {
      x: rect.x + lineIndent,
      y: currentY,
      width: rect.width - lineIndent,
      height: height
    };
    currentY += height;
    return purgeAttachments(newLine);
  });
};
/**
 * Performs line breaking and layout
 *
 * @param  {Object} engines
 * @param  {Object}  layout options
 * @param  {Object} rect
 * @param  {Object} attributed string
 * @return {Object} layout block
 */


var layoutParagraph = function layoutParagraph(engines, options) {
  return function (rect, paragraph) {
    var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;

    var indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;
    var availableWidths = [rect.width - indent, rect.width];
    var lines = engines.linebreaker(options)(paragraph, availableWidths);
    return layoutLines(rect, lines, indent);
  };
};

var _default = layoutParagraph;
exports.default = _default;