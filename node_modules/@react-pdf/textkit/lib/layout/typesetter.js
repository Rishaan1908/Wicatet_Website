"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _fns = require("@react-pdf/fns");

var _copy = _interopRequireDefault(require("../rect/copy"));

var _crop = _interopRequireDefault(require("../rect/crop"));

var _height = _interopRequireDefault(require("../block/height"));

var _truncate = _interopRequireDefault(require("../block/truncate"));

var _layoutParagraph = _interopRequireDefault(require("./layoutParagraph"));

var _sliceAtHeight = _interopRequireDefault(require("../block/sliceAtHeight"));

/**
 * Layout paragraphs inside container until it does not
 * fit anymore, performing line wrapping in the process.
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Object}  container rect
 * @param  {Object}  attributed strings (paragraphs)
 * @return {Array} paragraph blocks
 */
var typesetter = function typesetter(engines, options, container) {
  return function (attributedStrings) {
    var blocks = [];
    var paragraphs = [].concat(attributedStrings);
    var layoutBlock = (0, _layoutParagraph.default)(engines, options);
    var maxLines = (0, _fns.isNil)(container.maxLines) ? Infinity : container.maxLines;
    var truncateEllipsis = container.truncateMode === 'ellipsis';
    var linesCount = maxLines;
    var paragraphRect = (0, _copy.default)(container);
    var nextParagraph = paragraphs.shift();

    while (linesCount > 0 && nextParagraph) {
      var block = layoutBlock(paragraphRect, nextParagraph);
      var slicedBlock = block.slice(0, linesCount);
      var linesHeight = (0, _height.default)(slicedBlock);
      var shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;
      linesCount -= slicedBlock.length;

      if (paragraphRect.height >= linesHeight) {
        blocks.push(shouldTruncate ? (0, _truncate.default)(slicedBlock) : slicedBlock);
        paragraphRect = (0, _crop.default)(linesHeight, paragraphRect);
        nextParagraph = paragraphs.shift();
      } else {
        blocks.push((0, _truncate.default)((0, _sliceAtHeight.default)(paragraphRect.height, slicedBlock)));
        break;
      }
    }

    return blocks;
  };
};

var _default = typesetter;
exports.default = _default;