"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _fns = require("@react-pdf/fns");

var _advanceWidth = _interopRequireDefault(require("../attributedString/advanceWidth"));

var _leadingOffset = _interopRequireDefault(require("../attributedString/leadingOffset"));

var _trailingOffset = _interopRequireDefault(require("../attributedString/trailingOffset"));

var _dropLast = _interopRequireDefault(require("../attributedString/dropLast"));

var ALIGNMENT_FACTORS = {
  center: 0.5,
  right: 1
};
/**
 * Remove new line char at the end of line if present
 *
 * @param  {Object}  line
 * @return {Object} line
 */

var removeNewLine = function removeNewLine(line) {
  return (0, _fns.last)(line.string) === '\n' ? (0, _dropLast.default)(line) : line;
};

var getOverflowLeft = function getOverflowLeft(line) {
  return (0, _leadingOffset.default)(line) + (line.overflowLeft || 0);
};

var getOverflowRight = function getOverflowRight(line) {
  return (0, _trailingOffset.default)(line) + (line.overflowRight || 0);
};
/**
 * Ignore whitespace at the start and end of a line for alignment
 *
 * @param  {Object}  line
 * @return {Object} line
 */


var adjustOverflow = function adjustOverflow(line) {
  var overflowLeft = getOverflowLeft(line);
  var overflowRight = getOverflowRight(line);
  var x = line.box.x - overflowLeft;
  var width = line.box.width + overflowLeft + overflowRight;
  var box = Object.assign({}, line.box, {
    x: x,
    width: width
  });
  return Object.assign({}, line, {
    box: box,
    overflowLeft: overflowLeft,
    overflowRight: overflowRight
  });
};
/**
 * Performs line justification by calling appropiate engine
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {string}  text align
 * @param  {Object}  line
 * @return {Object} line
 */


var justifyLine = function justifyLine(engines, options, align) {
  return function (line) {
    var lineWidth = (0, _advanceWidth.default)(line);
    var alignFactor = ALIGNMENT_FACTORS[align] || 0;
    var remainingWidth = Math.max(0, line.box.width - lineWidth);
    var shouldJustify = align === 'justify' || lineWidth > line.box.width;
    var x = line.box.x + remainingWidth * alignFactor;
    var box = Object.assign({}, line.box, {
      x: x
    });
    var newLine = Object.assign({}, line, {
      box: box
    });
    return shouldJustify ? engines.justification(options)(newLine) : newLine;
  };
};
/**
 * Finalize line by performing line justification
 * and text decoration (using appropiate engines)
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Object}  line
 * @param  {number}  line index
 * @param  {Array}  total lines
 * @return {Object} line
 */


var finalizeBlock = function finalizeBlock(engines, options) {
  if (engines === void 0) {
    engines = {};
  }

  return function (line, i, lines) {
    var _line$runs, _line$runs$;

    var isLastFragment = i === lines.length - 1;
    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};
    var align = isLastFragment ? style.alignLastLine : style.align;
    return (0, _fns.compose)(engines.textDecoration(options), justifyLine(engines, options, align), adjustOverflow, removeNewLine)(line);
  };
};
/**
 * Finalize line block by performing line justification
 * and text decoration (using appropiate engines)
 *
 * @param  {Object}  engines
 * @param  {Object}  layout options
 * @param  {Array}  line blocks
 * @return {Array} line blocks
 */


var finalizeFragments = function finalizeFragments(engines, options) {
  return function (blocks) {
    var blockFinalizer = finalizeBlock(engines, options);
    return blocks.map(function (block) {
      return block.map(blockFinalizer);
    });
  };
};

var _default = finalizeFragments;
exports.default = _default;