"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _scale = _interopRequireDefault(require("./scale"));

var _offset = _interopRequireDefault(require("./offset"));

var _getFont = _interopRequireDefault(require("./getFont"));

var _slice = _interopRequireDefault(require("../glyph/slice"));

var _glyphIndexAt = _interopRequireDefault(require("./glyphIndexAt"));

var _normalize = _interopRequireDefault(require("../indices/normalize"));

/**
 * Slice run between glyph indices range
 *
 * @param  {number}  start glyph index
 * @param  {number}  end glyph index
 * @param  {Object}  run
 * @return {Object} sliced run
 */
var slice = function slice(start, end, run) {
  var _run$glyphs, _run$glyphs2;

  var runScale = (0, _scale.default)(run);
  var font = (0, _getFont.default)(run); // Get glyph start and end indices

  var startIndex = (0, _glyphIndexAt.default)(start, run);
  var endIndex = (0, _glyphIndexAt.default)(end, run); // Get start and end glyph

  var startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];
  var endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex]; // Get start ligature chunks (if any)

  var startOffset = (0, _offset.default)(start, run);
  var startGlyphs = startOffset > 0 ? (0, _slice.default)(startOffset, Infinity, font, startGlyph) : []; // Get end ligature chunks (if any)

  var endOffset = (0, _offset.default)(end, run);
  var endGlyphs = (0, _slice.default)(0, endOffset, font, endGlyph); // Compute new glyphs

  var sliceStart = startIndex + Math.min(1, startOffset);
  var glyphs = (run.glyphs || []).slice(sliceStart, endIndex); // Compute new positions

  var glyphPosition = function glyphPosition(g) {
    return {
      xAdvance: g.advanceWidth * runScale
    };
  };

  var startPositions = startGlyphs.map(glyphPosition);
  var positions = (run.positions || []).slice(sliceStart, endIndex);
  var endPositions = endGlyphs.map(glyphPosition);
  return Object.assign({}, run, {
    start: run.start + start,
    end: Math.min(run.end, run.start + end),
    glyphIndices: (0, _normalize.default)((run.glyphIndices || []).slice(start, end)),
    glyphs: [startGlyphs, glyphs, endGlyphs].flat(),
    positions: [startPositions, positions, endPositions].flat()
  });
};

var _default = slice;
exports.default = _default;