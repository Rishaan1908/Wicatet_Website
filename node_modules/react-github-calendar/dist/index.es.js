import React, { useState, useCallback, useEffect } from 'react';
import Calendar, { Skeleton } from 'react-activity-calendar';
export { createCalendarTheme } from 'react-activity-calendar';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

// GitHub theme
const API_URL = 'https://github-contributions-api.jogruber.de/v4/';
const DEFAULT_THEME = {
  level4: '#216e39',
  level3: '#30a14e',
  level2: '#40c463',
  level1: '#9be9a8',
  level0: '#ebedf0'
};

const transformData = (data, transformFn) => {
  if (typeof transformFn !== 'function') {
    return data;
  }

  const transformedData = transformFn(data);

  if (!Array.isArray(transformedData)) {
    throw new Error(`Passed function transformData must return a list of Day objects.`);
  }

  if (transformedData.length > 0) {
    const testObj = transformedData[0];

    if (typeof testObj.count !== 'number' || testObj.count < 0) {
      throw new Error(`Required property "count: number" missing or invalid. Got: ${testObj.count}`);
    }

    if (typeof testObj.date !== 'string' || !/(\d{4})-(\d{2})-(\d{2})/.test(testObj.date)) {
      throw new Error(`Required property "date: YYYY-MM-DD" missing or invalid. Got: ${testObj.date}`);
    }

    if (typeof testObj.level !== 'number' || testObj.level < 0 || testObj.level > 4) {
      throw new Error(`Required property "level: 0 | 1 | 2 | 3 | 4" missing or invalid: Got: ${testObj.level}.`);
    }
  }

  return transformedData;
};

async function fetchCalendarData(username, year) {
  const response = await fetch(`${API_URL}${username}?y=${year}`);
  const data = await response.json();

  if (!response.ok) {
    throw new Error(data.error);
  }

  return data;
}

const GitHubCalendar = _ref => {
  var _props$theme;

  let {
    username,
    year = 'last',
    transformData: transformDataProp,
    ...props
  } = _ref;
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const transformDataCallback = useCallback(contributions => transformData(contributions, transformDataProp), [transformDataProp]);
  const fetchData = useCallback(() => {
    setLoading(true);
    setError(null);
    fetchCalendarData(username, year).then(_ref2 => {
      let {
        contributions
      } = _ref2;
      return setData(transformDataCallback(contributions));
    }).catch(setError).finally(() => setLoading(false));
  }, [username, year, transformDataCallback]);
  useEffect(fetchData, [fetchData]);

  if (error) {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("i", null, "Unable to fetch contribution data. See console."));
  }

  if (loading || !data) {
    return /*#__PURE__*/React.createElement(Skeleton, _extends({}, props, {
      loading: true
    }));
  }

  const theme = props.color ? undefined : (_props$theme = props.theme) !== null && _props$theme !== void 0 ? _props$theme : DEFAULT_THEME;
  const labels = {
    totalCount: `{{count}} contributions in ${year === 'last' ? 'the last year' : '{{year}}'}`
  };
  return /*#__PURE__*/React.createElement(Calendar, _extends({
    data: data,
    theme: theme,
    labels: labels
  }, props));
};

export { GitHubCalendar as default };
//# sourceMappingURL=index.es.js.map
